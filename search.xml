<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>发散性问题汇总</title>
    <url>/2021/03/29/%E5%8F%91%E6%95%A3%E6%80%A7%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="如何从100亿URL中找出相同的URL？"><a href="#如何从100亿URL中找出相同的URL？" class="headerlink" title="如何从100亿URL中找出相同的URL？"></a>如何从100亿URL中找出相同的URL？</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul>
<li>给定a、b两个文件，各存放50亿个URL，每个URL各占64B，内存限制是4G。请找出a、b两个文件共同的URL。</li>
</ul>
<h2 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h2><ul>
<li>每个URL占64B，那么50亿个URL占用空间大约为320GB。</li>
<li>5000000000_64B≈5GB_64=320GB</li>
<li>由于内存大小只有4G，因此我们不可能一次性将所有URL加载到内存中进行处理。对于这类型题目，一般采用分治策略，即：把一个文件中的URL按照某个特征划分为多个小文件，使得每个小文件大小不超过4G，这样就可以把这些小文件读到内存中进行处理了。</li>
</ul>
<h2 id="思路如下"><a href="#思路如下" class="headerlink" title="思路如下"></a>思路如下</h2><ol>
<li><p>首先遍历文件a，对遍历到的URL求hash(URL)%1000,根据计算结果把遍历到的URL存储到a0,a1,a2,…,a999,这样每个大小约为300MB。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">字符串对象的哈希码根据以下公式计算：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> h = hash;</span><br><span class="line">    <span class="keyword">if</span>(h ==<span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> val[] = value;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; value.length; i++)&#123;</span><br><span class="line">            <span class="comment">//31为奇素数，31*i == (i&lt;&lt;5) - i</span></span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用同样的方法遍历文件b，把文件b中的URL分别存储到文件b0,b1,b2,…,b999中。</p>
</li>
<li><p>这样处理过后，所有可能相同的URL都在对应的小文件中，即a0对应的b0,…,a999对应的 b999，不对应的小文件中不可能有相同的URL。</p>
</li>
<li><p>那么接下来，我们只需要求出这1000对小文件中相同的URL就好了。</p>
</li>
<li><p>紧接着遍历ai(i∈[0,999]),把URL存储到一个HashSet集合中。</p>
</li>
<li><p>然后遍历bi中每一个URL，看在HashSet集合中是否存在，若存在，说明这就是共同的URL，把这个URL保存到一个单独的文件中。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>java进阶之路</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
        <tag>发散性问题</tag>
      </tags>
  </entry>
  <entry>
    <title>《坏小孩》读书笔记</title>
    <url>/2020/07/19/%E3%80%8A%E5%9D%8F%E5%B0%8F%E5%AD%A9%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《坏小孩》读书笔记"><a href="#《坏小孩》读书笔记" class="headerlink" title="《坏小孩》读书笔记"></a>《坏小孩》读书笔记</h1><p>&emsp;&emsp;在成年人眼里，小孩子永远是简单的，即便小孩会撒谎，那谎言也是能马上戳穿的。他们根本想象不到小孩子的诡计多端，哪怕他们自己也曾当过小孩。<br>&emsp;&emsp;上面是我在看完这本小说后印象最深刻的一句话。细细想来，事实便是如此，我们也都曾当过小孩，在那个年纪，我们所认知的世界和成年后所认知的世界，仿佛是两个世界，在成长的过程中，不知何时开始，认知的世界已经天翻地覆。我们经历过，所以拥有着更多的经验去判断，因此在对待小孩这件事情上，也会自然而然的去向着我们所认知的去靠拢，以为小孩都是单纯的，没有城府。可往往有时却事与愿违。<br>&emsp;&emsp;我们都曾是少年，也都会经历过一些被大人冤枉之事，心底声音犹如朱朝阳冷哼一声：“ 成年人就会听一面之词，尤其是女生的一面之词，笨得跟猪一样。”此时我们也会无奈、绝望。因为成年人拥有着判断的权利。书中的叶驰敏诬陷给朱朝阳时候，老师却在没有了解清楚真像情况下，却指责朱朝阳，尽管他的学习再用功，可是心灵上得不到温暖，最终只能造就出一个高智商的凶手。<br>  初中时的爱恋是单纯的，在普普对于朱朝阳的决定无条件的支持时候，尽管普普也知道这是一个错误的决定，可是就是因为心底的那一份喜欢，才会说出“你怪我没站在你这边，其实，我一直站在你这边”这种没有多少华丽的词语修饰，却有无条件支持朱朝阳决定的坚定。喜欢便是喜欢，喜欢便支持你的一切，你成佛，我便成佛。你入魔，我便随你入魔。这是成年人情感中所无法理解的，由于有过多的羁绊，有了外在的因素，感情也没法变得纯粹了，如张东升杀害徐静一般，两人曾经明明那么相爱，最后却沦落到杀与被杀的境地，实在令人唏嘘。<br>&emsp;&emsp;“你越害怕，别人就越知道你好欺负。只有不怕，别人才不敢对你怎么样“。这句话是普普对着朱朝阳说的，看似只是由于朱朝阳经常被欺负导致。却隐隐的贯穿了全文，朱朝阳的妈妈、张东升等人无疑也都是被欺负的人。人善被人欺、马善被人骑，如果事事太大度宽容，别人也不会感激你，反而会变本加厉。人就应该有点脾气，过分的善良便成为了软弱，丢失了自己的价值和尊严。<br>&emsp;&emsp;我是随着《隐秘的角落》这本电视剧的一致好评，有种想看原著的冲动。不过确实是有点失望，虽说《坏小孩》这本小说阐述出了人性，也尽可能展示出了一点推理。可是却在很多地方不够严谨，其中的警察形同虚设，如那车祸后的简单尸检、如那刀柄自己在身上划伤、如那微信普及的时代景区摄像头却如此缺少等等。细节地方确实让人没办法进行正常的推理思考，着实不太符合一本合理的推理小说。人性，往往是最复杂的，谁能想到一个此次年级第一、一个在家里学校的一个乖小孩，内心确实如此的阴暗。成年人只关注了他的成绩，却忽视了在最好的年纪时候的心理创伤，慢慢推入深渊无法自拔。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>面试汇总</title>
    <url>/2020/07/19/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="面试汇总"><a href="#面试汇总" class="headerlink" title="面试汇总"></a>面试汇总</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一份好的简历只是面试的敲门砖，强硬的技术才是破门而入的支持。</p>
<p>前段时间呢，面试了几家公司，感触还是蛮深刻的。虽说每个公司不同的业务侧重点也是不同，但是往往面试问题都殊途同归，在此我罗列了前段时间的面试问题，并进行了小小的汇总，希望可以帮助到面试中或者准备面试的同学。</p>
<p>（♥♥♥♥&hearts;标识频次较高问题）</p>
<h2 id="项目篇"><a href="#项目篇" class="headerlink" title="项目篇"></a>项目篇</h2><ul>
<li>讲讲你遇到过比较有价值的项目，以及你学到了什么（♥♥♥♥&hearts;）</li>
<li>你在项目中怎么处理问题</li>
<li>说说你在项目中遇到的一个最能提现技术的点</li>
<li>前后台交互用的什么协议</li>
<li>方法性能监控链路</li>
</ul>
<h2 id="框架篇"><a href="#框架篇" class="headerlink" title="框架篇"></a>框架篇</h2><ul>
<li>Spring IOC容器的创建原理（♥♥♥♥&hearts;）</li>
<li>Spring AOP连接点和切入点（♥♥♥♥&hearts;）</li>
<li>Spring bean的生命周期</li>
<li>Spring是如何将SpringMVC和Mybatis连接在一起的</li>
<li>SpringMVC是做什么的</li>
<li>Mybatis 一级和二级缓存</li>
<li>Mybatis如何防止sql注入，底层原理是什么</li>
</ul>
<h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><ul>
<li>==和equals</li>
<li>1.8新特性</li>
<li>数组和链表的区别</li>
<li>Hashmap结构，红黑树（♥♥♥♥&hearts;）</li>
<li>Hashmap与Hashtable区别，应用场景</li>
<li>ArrayList扩容（♥♥♥♥&hearts;）</li>
</ul>
<h2 id="网络篇"><a href="#网络篇" class="headerlink" title="网络篇"></a>网络篇</h2><ul>
<li>http,https区别</li>
<li>Session，Cookie分别起什么作用（♥♥♥♥&hearts;）</li>
<li>操作系统，线程和进程的区别等等</li>
<li>Tcp怎么建立连接的</li>
<li>http怎么请求的，http+s（♥♥♥♥&hearts;）</li>
<li>IO和NIO区别，应用场景</li>
</ul>
<h2 id="JVM篇"><a href="#JVM篇" class="headerlink" title="JVM篇"></a>JVM篇</h2><ul>
<li>JVM垃圾回收算法、垃圾收集器（♥♥♥♥&hearts;）</li>
<li>CMS和G1的区别</li>
<li>JVM内存模型 （♥♥♥♥&hearts;）</li>
<li>JMM模型、volatile底层是怎么实现的（♥♥♥♥&hearts;）</li>
<li>JVM调优</li>
<li>JVM如何打破双亲委派模型</li>
</ul>
<h2 id="多线程篇"><a href="#多线程篇" class="headerlink" title="多线程篇"></a>多线程篇</h2><ul>
<li>Syschonized是公平锁和非公平锁、1.6后特性优化、和lock对比呢（♥♥♥♥&hearts;）</li>
<li>ThreadLocal有了解么（♥♥♥♥&hearts;）</li>
<li>多线程返回时候用哪个类接收</li>
<li>多线程几种创建方法（♥♥♥♥&hearts;）</li>
<li>run和start的区别</li>
<li>线程池参数。哪些参数、如何生效、增长过程（♥♥♥♥&hearts;）</li>
<li>核心线程，队列线程数，最大线程数满了会出现什么问题。</li>
<li>多线程落库乐观锁，行锁，分布式锁</li>
<li>java的锁你用到什么（♥♥♥♥&hearts;）</li>
</ul>
<h2 id="数据库篇"><a href="#数据库篇" class="headerlink" title="数据库篇"></a>数据库篇</h2><ul>
<li>MyIsam和Innodb区别</li>
<li>你了解数据库事务么、事务四种特性和隔离级别（♥♥♥♥&hearts;）</li>
<li>MVCC，脏读、幻读（♥♥♥♥&hearts;）</li>
<li>Mysql中redolog和undolog了解么</li>
<li>mysql索引优化（♥♥♥♥&hearts;）</li>
<li>数据库索引底层结构、以及查询优化器怎选择索引（♥♥♥♥&hearts;）</li>
<li>什么时候不走索引</li>
<li>模糊查询时如何使得索引不失效</li>
<li>表锁和行锁什么场景、Gap间隙锁</li>
<li>Mysql乐观锁、悲观锁</li>
<li>分库分表</li>
<li>数据库主从延迟怎么解决（♥♥♥♥&hearts;）</li>
</ul>
<h2 id="Redis篇"><a href="#Redis篇" class="headerlink" title="Redis篇"></a>Redis篇</h2><ul>
<li>redis数据结构，底层实现（♥♥♥♥&hearts;）</li>
<li>redis zset底层是什么</li>
<li>redis雪崩，穿透，热点击穿（♥♥♥♥&hearts;）</li>
<li>redis淘汰策略（♥♥♥♥&hearts;）</li>
<li>一致性hash算法，你在哪里用到</li>
</ul>
<h2 id="RPC框架篇"><a href="#RPC框架篇" class="headerlink" title="RPC框架篇"></a>RPC框架篇</h2><ul>
<li>讲讲rpc框架原理（♥♥♥♥&hearts;）</li>
<li>dubbo工作原理、核心流程</li>
<li>如何保证高可用（♥♥♥♥&hearts;）</li>
<li>dubbo为什么传输快呢</li>
</ul>
<h2 id="MQ篇"><a href="#MQ篇" class="headerlink" title="MQ篇"></a>MQ篇</h2><ul>
<li>使用MQ的好处是什么</li>
<li>讲讲kafka</li>
<li>如何保证不会重复消费呢（♥♥♥♥&hearts;）</li>
</ul>
<h2 id="算法篇"><a href="#算法篇" class="headerlink" title="算法篇"></a>算法篇</h2><ul>
<li>List<Integer>手写多线程累加</li>
<li>两个有序数组合并成一个</li>
<li>一个无序数组中奇数位置大于两边偶数位置</li>
<li>二分查找算法找出第一个出现的数字</li>
<li>最大人工岛问题</li>
<li>你知道排序算法都有哪些吗，说下快排和堆排</li>
<li>从左到右遍历二叉树</li>
<li>字符串转float</li>
<li>非空链表相加</li>
<li>阶乘后面有多少0怎么计算</li>
<li>一个数组，使得前面是奇数，后面是偶数，o(n),o(1)</li>
<li>回文编写</li>
<li>字符串相加</li>
<li>线程安全的正整数，实现increamentAndGet和decreamentAndGet两个方法</li>
<li>有5亿用户，用户id是int类型，在1到5亿区间连续，从这5亿用户中均匀、随机抽取10万个用户id发促销邮件。</li>
</ul>
<h2 id="设计模式篇"><a href="#设计模式篇" class="headerlink" title="设计模式篇"></a>设计模式篇</h2><ul>
<li>说说你熟悉的设计模式，在什么地方用过</li>
</ul>
<h2 id="场景设计篇"><a href="#场景设计篇" class="headerlink" title="场景设计篇"></a>场景设计篇</h2><ul>
<li>后台是长地址，给前台暴露的是短地址，怎么设计</li>
<li>设计一个对象池，commons-pool</li>
<li>10亿个手机号查找</li>
<li>秒杀操作，库存怎么保证一致性</li>
</ul>
]]></content>
      <categories>
        <category>java进阶之路</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程问题汇总</title>
    <url>/2021/06/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="多线程问题汇总"><a href="#多线程问题汇总" class="headerlink" title="多线程问题汇总"></a>多线程问题汇总</h2><h3 id="谈谈你对volatile的理解"><a href="#谈谈你对volatile的理解" class="headerlink" title="谈谈你对volatile的理解"></a>谈谈你对volatile的理解</h3><ul>
<li>valatile是java虚拟机提供的轻量级的同步机制<ul>
<li>保证可见性<ul>
<li>假如int num = 0；num 变量之前没有添加volatile关键字修饰，没有可见性。工作内存中修改，主内存值不变。</li>
<li>添加了volatile，可解决可见性问题</li>
</ul>
</li>
<li>不保证原子性(i++)<ul>
<li>如何解决？<ul>
<li>加sync</li>
<li>AtomicInteger.getAndIncrement()</li>
</ul>
</li>
</ul>
</li>
<li>禁止指令重排</li>
</ul>
</li>
<li>谈谈JMM<ul>
<li>由于JVM运行程序的实体是内存，而每个线程创建时JVM都会为其创建一个工作内存，工作内存时每个线程的私有数据区域，而java内存模型中规定所有变量都存储在主内存。</li>
<li>主内存是共享内存区域，所有线程都可以访问，但线程对变量的操作必须在工作内存中进行，首先要将变量从主内存中拷贝到自己的工作内存空间，然后再对变量进行操作，操作完成后再将变量写回主内存，不能直接操作主内存的变量。</li>
<li>各个线程中的工作内存中存储着主内存中的变量副本拷贝，因此不同的线程间无法访问对方的工作内存，线程间的通信(传值)必须通过主内存来完成</li>
</ul>
</li>
<li>在什么地方用到过valatile<ul>
<li>单例模式：防止指令重排<ul>
<li>分配对象内存空间</li>
<li>初始化对象</li>
<li>设置instance指向内存分配的内存地址</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="CAS你知道吗？"><a href="#CAS你知道吗？" class="headerlink" title="CAS你知道吗？"></a>CAS你知道吗？</h3><ul>
<li><p>需要取出内存中某时刻的数据并在当下时刻比较并交换 </p>
</li>
<li><p>CAS底层原理？谈谈UnSafe的理解  </p>
</li>
<li><p>CAS缺点</p>
<ul>
<li><p>循环时间长开销很大</p>
<ul>
<li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1,<span class="keyword">long</span> var2,<span class="keyword">int</span> var4)</span></span>{
    <span class="keyword">int</span> var5;
    <span class="keyword">do</span>{
        var5 =     <span class="keyword">this</span>.getIntVolatile(var1,var2);
    }<span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1,var2,var5,var5+var4));
    <span class="keyword">return</span> var5;
}</code></pre>
</li>
</ul>
</li>
<li><p>只能保证一个共享变量的原子操作</p>
<ul>
<li>对于多个变量原子操作只能通过加锁来保证</li>
</ul>
</li>
<li><p>ABA问题</p>
<ul>
<li>AtomicReference的使用，使得对象可以解决aba问题</li>
<li>AtomicStampReference的使用，使得可以进行版本之间叠加</li>
<li>解决方法：新增一种机制，就是修改版本号（类似时间戳）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="ArrayList：高并发下add操作"><a href="#ArrayList：高并发下add操作" class="headerlink" title="ArrayList：高并发下add操作"></a>ArrayList：高并发下add操作</h3><ul>
<li>故障现象<ul>
<li>java.util.ConcurrentModificationException</li>
</ul>
</li>
<li>导致原因<ul>
<li>并发争抢修改导致</li>
<li>一个正在写入，另外一个过来抢夺，导致数据不一致异常，导致修改异常</li>
</ul>
</li>
<li>解决方案<ul>
<li>new Vector&lt;&gt;()</li>
<li>Collections.synchronizedList(new ArrayList&lt;&gt;());</li>
<li>new CopyOnWriteArrayList&lt;&gt;();复制并写入集合</li>
</ul>
</li>
<li>优化建议（同样的错误不犯第2次 ）</li>
</ul>
<h3 id="Set：底层是HashMap"><a href="#Set：底层是HashMap" class="headerlink" title="Set：底层是HashMap"></a>Set：底层是HashMap</h3><ul>
<li>故障现象<ul>
<li>java.util.ConcurrentModificationException</li>
</ul>
</li>
<li>解决方案<ul>
<li>Collections.synchronizedSet(new HashSet&lt;&gt;());</li>
<li>new CopyOnWriteArraySet&lt;&gt;();复制并写入集合</li>
</ul>
</li>
</ul>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul>
<li>ConcurrentHashMap</li>
</ul>
<h3 id="公平锁-非公平锁-可重入锁-递归锁-自旋锁谈谈你的理解？请手写一个自旋锁"><a href="#公平锁-非公平锁-可重入锁-递归锁-自旋锁谈谈你的理解？请手写一个自旋锁" class="headerlink" title="公平锁/非公平锁/可重入锁/递归锁/自旋锁谈谈你的理解？请手写一个自旋锁"></a>公平锁/非公平锁/可重入锁/递归锁/自旋锁谈谈你的理解？请手写一个自旋锁</h3><ul>
<li>公平和非公平锁<ul>
<li>公平锁：是多个线程按照申请锁的顺序来获取锁，类似排队打饭，先来后到，ReentrantLock(true)</li>
<li>非公平锁：是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程先获取锁。在高并发的情况下，有可能会造成优先级反转或者饥饿现象，ReentrantLock()，Synchronized</li>
</ul>
</li>
<li>可重入锁（递归锁）<ul>
<li>指的是同一个线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。</li>
<li>也即使说，线程可以进入任何一个它已经拥有的锁所同步着的代码块</li>
<li>ReentrantLock()，Synchronized，lock</li>
<li>作用：避免死锁，用的是同一把锁</li>
</ul>
</li>
<li>自旋锁<ul>
<li>是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式尝试获取锁</li>
<li>好处是减少线程上下文切换的消耗，缺点是循环会消耗cpu</li>
</ul>
</li>
<li>独占锁（写锁）/共享锁（读锁）/互斥锁<ul>
<li>独占锁：该锁一次只能被一个线程所持有。对ReentrantLock和Synchronized而言都是独占锁</li>
<li>共享锁：该锁可以被多个线程所持有，对ReentrantReadWriteLock其读锁是共享锁，其写锁是独占锁。</li>
<li>读锁的共享锁可保证并发读是非常高效的，读写，写读，写写的过程是互斥的。</li>
</ul>
</li>
</ul>
<h3 id="CountDownLatch-CyclicBarrier-Semaphon使用过吗？"><a href="#CountDownLatch-CyclicBarrier-Semaphon使用过吗？" class="headerlink" title="CountDownLatch/CyclicBarrier/Semaphon使用过吗？"></a>CountDownLatch/CyclicBarrier/Semaphon使用过吗？</h3><ul>
<li>CountDownLatch<ul>
<li>让一些线程阻塞直到另一些线程完成一系列操作后才被唤醒</li>
<li>CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，调用线程会被阻塞，其他线程调用countDown方法会将计数器减1(调用countDown方法的线程不会阻塞)，当计数器的值变为0时，因调用await方法被阻塞的线程会被唤醒，继续执行。</li>
</ul>
</li>
<li>CyclicBarrier<ul>
<li>CyclicBarrier的字面意思是可循环(Cyclic)使用的屏障(Barrier)。它要做的事情是，让一组线程到达一个屏障(也可叫同步点)时被阻塞，知道最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await()方法。</li>
</ul>
</li>
<li>Semaphone<ul>
<li>信号量主要用于两个目的，一个用于多个共享资源的互斥使用，另一个用于并发线程数的控制。</li>
</ul>
</li>
</ul>
<h3 id="阻塞队列知道吗？"><a href="#阻塞队列知道吗？" class="headerlink" title="阻塞队列知道吗？"></a>阻塞队列知道吗？</h3><ul>
<li>队列+阻塞队列<ul>
<li>阻塞队列，顾名思义，首先它是一个队列，而一个阻塞队列，线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素</li>
<li>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞。当阻塞队列是满时，往队列里添加元素的操作将会被阻塞</li>
</ul>
</li>
<li>为什么用？有什么好处？<ul>
<li>在多线程领域：所谓阻塞，在某些情况下会挂起线程(即阻塞)，一旦条件满足，被挂起的线程又会自动被唤醒</li>
<li>好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都给你一手包办了</li>
</ul>
</li>
<li>BlockingQueue的核心方法</li>
<li>架构梳理+种类分析<ul>
<li>(重要)ArrayBlockQueue：由数组组成的有界阻塞队列</li>
<li>(重要)LinkedBlockQueue：由链表构成的有界(但大小默认值为Integer.MAX_VALUE)阻塞队列</li>
<li>PriorityBlockQueue:支持优先级排序的无界阻塞队列</li>
<li>DelayQueue:使用优先级队列实现的延迟无界阻塞队列</li>
<li>(重要)SynchronousQueue:不存储元素的阻塞队列，也即单个元素的队列，同步阻塞队列<ul>
<li>SynchronousQueue没有容量。每一个put操作必须等待一个take操作，否则不能继续添加元素，反之亦然</li>
</ul>
</li>
<li>LinkedTransferQueue：由链表结构组成的无界阻塞队列</li>
<li>LinkedBlockingDeque：由链表结构组成的双向阻塞队列</li>
</ul>
</li>
<li>用在哪里<ul>
<li>生产者消费者模式<ul>
<li>传统版：ProdConsumer_Traditon</li>
<li>阻塞队列版：ProdConsumer_BlockQueue</li>
</ul>
</li>
<li>线程池</li>
<li>消息中间件</li>
</ul>
</li>
</ul>
<h3 id="synchronized和lock有什么区别？用新的lock有什么好处，你举例说说"><a href="#synchronized和lock有什么区别？用新的lock有什么好处，你举例说说" class="headerlink" title="synchronized和lock有什么区别？用新的lock有什么好处，你举例说说"></a>synchronized和lock有什么区别？用新的lock有什么好处，你举例说说</h3><ul>
<li>原始构成<ul>
<li>synchronized是关键字属于JVM层面</li>
<li>lock是具体类(java.util.concurrent.locks.lock)是api层面</li>
</ul>
</li>
<li>使用方法<ul>
<li>synchronized不需要用户手动释放锁，当synchronized代码执行完成后系统会自动让线程释放对锁的占用</li>
<li>ReentrantLock需要用户手动去释放锁，若没有主动释放，则会出现死锁现象，需要lock()和unlock()方法配合try/finallly语句块来完成。</li>
</ul>
</li>
<li>等待是否可中断<ul>
<li>synchronized不可中断，除非抛出异常或者正常运行完成</li>
<li>ReentrantLock可中断<ul>
<li>设置超时方法tryLock(long timeout,TimeUnit unit)</li>
<li>lockInterruptibly()放代码块中，调用interrupt()方法可中断</li>
</ul>
</li>
</ul>
</li>
<li>加锁是否公平<ul>
<li>synchronized是非公平锁</li>
<li>ReentrantLock两者都可以，默认公平锁。构造方法可以传入boolean值，true为公平锁，false为非公平锁。</li>
</ul>
</li>
<li>锁绑定多个条件condition<ul>
<li>synchronized没有</li>
<li>reentrantLock用来实现分组唤醒需要唤醒的线程们，可以精确唤醒，而不是像synchronized要么随机唤醒一个线程要么唤醒全部线程</li>
</ul>
</li>
</ul>
<h3 id="线程池用过吗？ThreadPollExecutor谈谈你的理解"><a href="#线程池用过吗？ThreadPollExecutor谈谈你的理解" class="headerlink" title="线程池用过吗？ThreadPollExecutor谈谈你的理解"></a>线程池用过吗？ThreadPollExecutor谈谈你的理解</h3><ul>
<li>为什么用线程池，优势<ul>
<li>线程池做的工作主要是控制运行线程的数量。处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量超过数量的线程排队等待，等其他线程执行完毕，再从队列中取出任务来执行。</li>
<li>主要特点<ul>
<li>线程复用</li>
<li>控制最大并发数</li>
<li>管理线程</li>
</ul>
</li>
<li>优点<ul>
<li>降低资源消耗，通过重复利用已创建的线程减低线程创建和销毁造成的消耗</li>
<li>提高相应速度，当任务到达时，任务可以不需要的等到线程创建就能立即执行</li>
<li>提高线程的可管理性，线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li>
</ul>
</li>
</ul>
</li>
<li>线程池如何使用？<ul>
<li>ThreadPoolExecutor<ul>
<li>Executors.newFixedThreadPool(int)，执行长期的任务，性能好很多</li>
<li>Executors.newFixedThreadPool(int)，一个任务一个任务执行的场景</li>
<li>Executors.newCachedThreadPool()，执行很多短期异步的小程序或者负载较轻的服务</li>
</ul>
</li>
</ul>
</li>
<li>线程池的几个重要参数介绍？<ul>
<li>corePoolSize:线程池中的常驻核心线程数</li>
<li>maxmumpoolSize:线程池能够容纳同时执行的最大线程数，此值必须大于等于1。等待队列满了后，再有新的请求过来，会进行扩容到最大线程数。</li>
<li>keepAliveTime:多余的空闲线程的存活时间。。当线程池数量超过corePoolSize时，当空闲时间达到keepAliveTime值时，多余空闲线程会被销毁直到只剩下corePoolSize个线程为止。</li>
<li>unit:keepAliveTime的单位</li>
<li>workQueue:任务队列，被提交但尚未被执行的任务</li>
<li>threadFactory:表示生成线程池中工作线程的线程工厂，用于创建线程，一般用默认的即可。</li>
<li>handler：拒绝策略，表示当队列满了并且工作线程大于等于线程池的最大线程数（maxmumPoolSize）时如何拒绝请求执行来的runnable的策略。</li>
</ul>
</li>
<li>说说线程池的底层工作原理？<ul>
<li>在创建了线程池后，等待提交过来的任务请求</li>
<li>当调用execute()方法添加一个请求任务时，线程池会做如下判断：<ul>
<li>如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；</li>
<li>如果正在运行的线程数量大于或者等于corePoolSize，那么将这个任务放入队列</li>
<li>如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务。</li>
<li>如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行。</li>
</ul>
</li>
<li>当一个线程完成任务时，它会从队列中取出下一个任务来执行。</li>
<li>当一个线程无事可做超过一定的时间(KeepAliveTime)时，线程池会判断：<ul>
<li>如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。</li>
<li>所有线程池任务完成后最终会收缩到corePoolSize的大小。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="线程池用过吗？生产上你如何设置合理参数"><a href="#线程池用过吗？生产上你如何设置合理参数" class="headerlink" title="线程池用过吗？生产上你如何设置合理参数"></a>线程池用过吗？生产上你如何设置合理参数</h3><ul>
<li>线程池的拒绝策略你谈谈<ul>
<li>AbortPolicy(默认)：直接抛出RejectedExecutionException异常组织系统正常运行。</li>
<li>CallerRunsPolicy：“调用者运行”一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量。</li>
<li>DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务。</li>
<li>DiscardPolicy：直接丢弃任务，不予任何处理也不抛出异常。如果允许任务丢失，这是最好的一种方案。</li>
<li>以上拒绝策略均实现了RejectedExecutionHandler接口。</li>
</ul>
</li>
<li>你在工作中单一的/固定数的/可变的三种创建线程池的方法，你用哪个多？<ul>
<li>一个都不用，我们生产上只能使用自定义的</li>
<li>Executors中JDK已经给你提供了，为什么不用？<ul>
<li>因为阿里规范，队列为Linked，是一个无界队列。</li>
</ul>
</li>
</ul>
</li>
<li>你在工作中是如何使用线程池的，是否自定义过线程池使用</li>
<li>合理配置线程池你是如何考虑的？<ul>
<li>CPU密集型<ul>
<li>CPU密集的意思是该任务需要大量的运算，而没有阻塞，cpu一直全速运行。一般公式：CPU核数+1个线程的线程池</li>
</ul>
</li>
<li>IO密集型<ul>
<li>由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如CPU核数*2</li>
<li>IO密集型，即该任务需要大量的IO，即大量的阻塞。参考公式：CPU核数/1-阻塞系数。阻塞系数：0.8-0.9之间</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="死锁编码及定位分析"><a href="#死锁编码及定位分析" class="headerlink" title="死锁编码及定位分析"></a>死锁编码及定位分析</h3><ul>
<li>是什么<ul>
<li>死锁是指两个或者两个以上的线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力干涉，那他们都将无法推进下去。</li>
<li>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因为争夺有限资源而陷入死锁</li>
</ul>
</li>
<li><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li>
<li>主要原因<ul>
<li>系统资源不足</li>
<li>进程运行推进的顺序不合适</li>
<li>资源分配不当</li>
</ul>
</li>
<li>解决<ul>
<li>jps -l命令定位进程号</li>
<li>jstack 进程号。找到死锁查看</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java进阶之路</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
