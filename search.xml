<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>发散性问题汇总</title>
    <url>/2021/03/29/%E5%8F%91%E6%95%A3%E6%80%A7%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="发散性问题汇总"><a href="#发散性问题汇总" class="headerlink" title="发散性问题汇总"></a>发散性问题汇总</h1><h2 id="如何从100亿URL中找出相同的URL？"><a href="#如何从100亿URL中找出相同的URL？" class="headerlink" title="如何从100亿URL中找出相同的URL？"></a>如何从100亿URL中找出相同的URL？</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul>
<li>给定a、b两个文件，各存放50亿个URL，每个URL各占64B，内存限制是4G。请找出a、b两个文件共同的URL。</li>
</ul>
<h3 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h3><ul>
<li>每个URL占64B，那么50亿个URL占用空间大约为320GB。5000000000<em>64B≈5GB</em>64=320GB</li>
<li>由于内存大小只有4G，因此我们不可能一次性将所有URL加载到内存中进行处理。对于这类型题目，一般采用分治策略，即：把一个文件中的URL按照某个特征划分为多个小文件，使得每个小文件大小不超过4G，这样就可以把这些小文件读到内存中进行处理了。</li>
</ul>
<h3 id="思路如下"><a href="#思路如下" class="headerlink" title="思路如下"></a>思路如下</h3><ol>
<li>首先遍历文件a，对遍历到的URL求hash(URL)%1000,根据计算结果把遍历到的URL存储到a0,a1,a2,…,a999,这样每个大小约为300MB。</li>
<li>使用同样的方法遍历文件b，把文件b中的URL分别存储到文件b0,b1,b2,…,b999中。</li>
<li>这样处理过后，所有可能相同的URL都在对应的小文件中，即a0对应的b0,…,a999对应的 b999，不对应的小文件中不可能有相同的URL。</li>
<li>那么接下来，我们只需要求出这1000对小文件中相同的URL就好了。</li>
<li>紧接着遍历ai(i∈[0,999]),把URL存储到一个HashSet集合中。</li>
<li>然后遍历bi中每一个URL，看在HashSet集合中是否存在，若存在，说明这就是共同的URL，把这个URL保存到一个单独的文件中。</li>
</ol>
]]></content>
      <categories>
        <category>java进阶之路</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>《坏小孩》读书笔记</title>
    <url>/2020/07/19/%E3%80%8A%E5%9D%8F%E5%B0%8F%E5%AD%A9%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《坏小孩》读书笔记"><a href="#《坏小孩》读书笔记" class="headerlink" title="《坏小孩》读书笔记"></a>《坏小孩》读书笔记</h1><p>&emsp;&emsp;在成年人眼里，小孩子永远是简单的，即便小孩会撒谎，那谎言也是能马上戳穿的。他们根本想象不到小孩子的诡计多端，哪怕他们自己也曾当过小孩。<br>&emsp;&emsp;上面是我在看完这本小说后印象最深刻的一句话。细细想来，事实便是如此，我们也都曾当过小孩，在那个年纪，我们所认知的世界和成年后所认知的世界，仿佛是两个世界，在成长的过程中，不知何时开始，认知的世界已经天翻地覆。我们经历过，所以拥有着更多的经验去判断，因此在对待小孩这件事情上，也会自然而然的去向着我们所认知的去靠拢，以为小孩都是单纯的，没有城府。可往往有时却事与愿违。<br>&emsp;&emsp;我们都曾是少年，也都会经历过一些被大人冤枉之事，心底声音犹如朱朝阳冷哼一声：“ 成年人就会听一面之词，尤其是女生的一面之词，笨得跟猪一样。”此时我们也会无奈、绝望。因为成年人拥有着判断的权利。书中的叶驰敏诬陷给朱朝阳时候，老师却在没有了解清楚真像情况下，却指责朱朝阳，尽管他的学习再用功，可是心灵上得不到温暖，最终只能造就出一个高智商的凶手。<br>  初中时的爱恋是单纯的，在普普对于朱朝阳的决定无条件的支持时候，尽管普普也知道这是一个错误的决定，可是就是因为心底的那一份喜欢，才会说出“你怪我没站在你这边，其实，我一直站在你这边”这种没有多少华丽的词语修饰，却有无条件支持朱朝阳决定的坚定。喜欢便是喜欢，喜欢便支持你的一切，你成佛，我便成佛。你入魔，我便随你入魔。这是成年人情感中所无法理解的，由于有过多的羁绊，有了外在的因素，感情也没法变得纯粹了，如张东升杀害徐静一般，两人曾经明明那么相爱，最后却沦落到杀与被杀的境地，实在令人唏嘘。<br>&emsp;&emsp;“你越害怕，别人就越知道你好欺负。只有不怕，别人才不敢对你怎么样“。这句话是普普对着朱朝阳说的，看似只是由于朱朝阳经常被欺负导致。却隐隐的贯穿了全文，朱朝阳的妈妈、张东升等人无疑也都是被欺负的人。人善被人欺、马善被人骑，如果事事太大度宽容，别人也不会感激你，反而会变本加厉。人就应该有点脾气，过分的善良便成为了软弱，丢失了自己的价值和尊严。<br>&emsp;&emsp;我是随着《隐秘的角落》这本电视剧的一致好评，有种想看原著的冲动。不过确实是有点失望，虽说《坏小孩》这本小说阐述出了人性，也尽可能展示出了一点推理。可是却在很多地方不够严谨，其中的警察形同虚设，如那车祸后的简单尸检、如那刀柄自己在身上划伤、如那微信普及的时代景区摄像头却如此缺少等等。细节地方确实让人没办法进行正常的推理思考，着实不太符合一本合理的推理小说。人性，往往是最复杂的，谁能想到一个此次年级第一、一个在家里学校的一个乖小孩，内心确实如此的阴暗。成年人只关注了他的成绩，却忽视了在最好的年纪时候的心理创伤，慢慢推入深渊无法自拔。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>面试汇总</title>
    <url>/2020/07/19/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="面试汇总"><a href="#面试汇总" class="headerlink" title="面试汇总"></a>面试汇总</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一份好的简历只是面试的敲门砖，强硬的技术才是破门而入的支持。</p>
<p>前段时间呢，面试了几家公司，感触还是蛮深刻的。虽说每个公司不同的业务侧重点也是不同，但是往往面试问题都殊途同归，在此我罗列了前段时间的面试问题，并进行了小小的汇总，希望可以帮助到面试中或者准备面试的同学。</p>
<p>（♥♥♥♥&hearts;标识频次较高问题）</p>
<h2 id="项目篇"><a href="#项目篇" class="headerlink" title="项目篇"></a>项目篇</h2><ul>
<li>讲讲你遇到过比较有价值的项目，以及你学到了什么（♥♥♥♥&hearts;）</li>
<li>你在项目中怎么处理问题</li>
<li>说说你在项目中遇到的一个最能提现技术的点</li>
<li>前后台交互用的什么协议</li>
<li>方法性能监控链路</li>
</ul>
<h2 id="框架篇"><a href="#框架篇" class="headerlink" title="框架篇"></a>框架篇</h2><ul>
<li>Spring IOC容器的创建原理（♥♥♥♥&hearts;）</li>
<li>Spring AOP连接点和切入点（♥♥♥♥&hearts;）</li>
<li>Spring bean的生命周期</li>
<li>Spring是如何将SpringMVC和Mybatis连接在一起的</li>
<li>SpringMVC是做什么的</li>
<li>Mybatis 一级和二级缓存</li>
<li>Mybatis如何防止sql注入，底层原理是什么</li>
</ul>
<h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><ul>
<li>==和equals</li>
<li>1.8新特性</li>
<li>数组和链表的区别</li>
<li>Hashmap结构，红黑树（♥♥♥♥&hearts;）</li>
<li>Hashmap与Hashtable区别，应用场景</li>
<li>ArrayList扩容（♥♥♥♥&hearts;）</li>
</ul>
<h2 id="网络篇"><a href="#网络篇" class="headerlink" title="网络篇"></a>网络篇</h2><ul>
<li>http,https区别</li>
<li>Session，Cookie分别起什么作用（♥♥♥♥&hearts;）</li>
<li>操作系统，线程和进程的区别等等</li>
<li>Tcp怎么建立连接的</li>
<li>http怎么请求的，http+s（♥♥♥♥&hearts;）</li>
<li>IO和NIO区别，应用场景</li>
</ul>
<h2 id="JVM篇"><a href="#JVM篇" class="headerlink" title="JVM篇"></a>JVM篇</h2><ul>
<li>JVM垃圾回收算法、垃圾收集器（♥♥♥♥&hearts;）</li>
<li>CMS和G1的区别</li>
<li>JVM内存模型 （♥♥♥♥&hearts;）</li>
<li>JMM模型、volatile底层是怎么实现的（♥♥♥♥&hearts;）</li>
<li>JVM调优</li>
<li>JVM如何打破双亲委派模型</li>
</ul>
<h2 id="多线程篇"><a href="#多线程篇" class="headerlink" title="多线程篇"></a>多线程篇</h2><ul>
<li>Syschonized是公平锁和非公平锁、1.6后特性优化、和lock对比呢（♥♥♥♥&hearts;）</li>
<li>ThreadLocal有了解么（♥♥♥♥&hearts;）</li>
<li>多线程返回时候用哪个类接收</li>
<li>多线程几种创建方法（♥♥♥♥&hearts;）</li>
<li>run和start的区别</li>
<li>线程池参数。哪些参数、如何生效、增长过程（♥♥♥♥&hearts;）</li>
<li>核心线程，队列线程数，最大线程数满了会出现什么问题。</li>
<li>多线程落库乐观锁，行锁，分布式锁</li>
<li>java的锁你用到什么（♥♥♥♥&hearts;）</li>
</ul>
<h2 id="数据库篇"><a href="#数据库篇" class="headerlink" title="数据库篇"></a>数据库篇</h2><ul>
<li>MyIsam和Innodb区别</li>
<li>你了解数据库事务么、事务四种特性和隔离级别（♥♥♥♥&hearts;）</li>
<li>MVCC，脏读、幻读（♥♥♥♥&hearts;）</li>
<li>Mysql中redolog和undolog了解么</li>
<li>mysql索引优化（♥♥♥♥&hearts;）</li>
<li>数据库索引底层结构、以及查询优化器怎选择索引（♥♥♥♥&hearts;）</li>
<li>什么时候不走索引</li>
<li>模糊查询时如何使得索引不失效</li>
<li>表锁和行锁什么场景、Gap间隙锁</li>
<li>Mysql乐观锁、悲观锁</li>
<li>分库分表</li>
<li>数据库主从延迟怎么解决（♥♥♥♥&hearts;）</li>
</ul>
<h2 id="Redis篇"><a href="#Redis篇" class="headerlink" title="Redis篇"></a>Redis篇</h2><ul>
<li>redis数据结构，底层实现（♥♥♥♥&hearts;）</li>
<li>redis zset底层是什么</li>
<li>redis雪崩，穿透，热点击穿（♥♥♥♥&hearts;）</li>
<li>redis淘汰策略（♥♥♥♥&hearts;）</li>
<li>一致性hash算法，你在哪里用到</li>
</ul>
<h2 id="RPC框架篇"><a href="#RPC框架篇" class="headerlink" title="RPC框架篇"></a>RPC框架篇</h2><ul>
<li>讲讲rpc框架原理（♥♥♥♥&hearts;）</li>
<li>dubbo工作原理、核心流程</li>
<li>如何保证高可用（♥♥♥♥&hearts;）</li>
<li>dubbo为什么传输快呢</li>
</ul>
<h2 id="MQ篇"><a href="#MQ篇" class="headerlink" title="MQ篇"></a>MQ篇</h2><ul>
<li>使用MQ的好处是什么</li>
<li>讲讲kafka</li>
<li>如何保证不会重复消费呢（♥♥♥♥&hearts;）</li>
</ul>
<h2 id="算法篇"><a href="#算法篇" class="headerlink" title="算法篇"></a>算法篇</h2><ul>
<li>List<Integer>手写多线程累加</li>
<li>两个有序数组合并成一个</li>
<li>一个无序数组中奇数位置大于两边偶数位置</li>
<li>二分查找算法找出第一个出现的数字</li>
<li>最大人工岛问题</li>
<li>你知道排序算法都有哪些吗，说下快排和堆排</li>
<li>从左到右遍历二叉树</li>
<li>字符串转float</li>
<li>非空链表相加</li>
<li>阶乘后面有多少0怎么计算</li>
<li>一个数组，使得前面是奇数，后面是偶数，o(n),o(1)</li>
<li>回文编写</li>
<li>字符串相加</li>
<li>线程安全的正整数，实现increamentAndGet和decreamentAndGet两个方法</li>
<li>有5亿用户，用户id是int类型，在1到5亿区间连续，从这5亿用户中均匀、随机抽取10万个用户id发促销邮件。</li>
</ul>
<h2 id="设计模式篇"><a href="#设计模式篇" class="headerlink" title="设计模式篇"></a>设计模式篇</h2><ul>
<li>说说你熟悉的设计模式，在什么地方用过</li>
</ul>
<h2 id="场景设计篇"><a href="#场景设计篇" class="headerlink" title="场景设计篇"></a>场景设计篇</h2><ul>
<li>后台是长地址，给前台暴露的是短地址，怎么设计</li>
<li>设计一个对象池，commons-pool</li>
<li>10亿个手机号查找</li>
<li>秒杀操作，库存怎么保证一致性</li>
</ul>
]]></content>
      <categories>
        <category>java进阶之路</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
